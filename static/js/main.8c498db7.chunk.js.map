{"version":3,"sources":["components/game/Cell.js","components/game/Game.js","components/menu/Menu.js","components/rank/Rank.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["Cell","value","index","clicked","onClickCell","onEnterCell","onTouchMove","onMouseUp","isAnswer","className","classNames","onMouseDown","onMouseEnter","onTouchStart","e","onTouchEnd","Game","history","useState","numberList","setNumberList","boardRef","useRef","Date","now","startTime","curTime","setCurTime","isDrag","setIsDrag","dragCellList","setDragCellList","answerCellList","setAnswerCellList","targetNumber","setTargetNumber","score","timerId","setTimerId","gameType","useParams","useEffect","console","log","arr","Array","i","length","getCellNumber","getTargetNumber","setInterval","updateTime","deltaTime","toFixed","parseInt","Math","random","getDragCellSum","reduce","accumulator","currentValue","processDrag","includes","useCallback","x","touches","clientX","y","clientY","current","children","child","childX","getBoundingClientRect","width","childY","setTimeout","newNumberList","clearInterval","alert","push","checkAnswer","ref","map","number","Menu","to","Rank","App","basename","process","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c498db7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Cell = ({\r\n  value,\r\n  index,\r\n  clicked,\r\n  onClickCell,\r\n  onEnterCell,\r\n  onTouchMove,\r\n  onMouseUp,\r\n  isAnswer\r\n}) => {\r\n  return (\r\n    <div\r\n      className={classNames(`cell value${value}`, { clicked, isAnswer })}\r\n      onMouseDown={() => onClickCell(index)}\r\n      onMouseEnter={() => onEnterCell(index)}\r\n      onTouchStart={() => onClickCell(index)}\r\n      onTouchMove={(e) => onTouchMove(e)}\r\n      onTouchEnd={onMouseUp}\r\n    >\r\n      {value}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import \"./Game.scss\";\r\n\r\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\r\n\r\nimport Cell from \"components/game/Cell\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst Game = ({ history }) => {\r\n  // 숫자판\r\n  const [numberList, setNumberList] = useState([]);\r\n\r\n  // 보드 ref\r\n  const boardRef = useRef();\r\n\r\n  // 시간\r\n  const [startTime, setStartTime] = useState(Date.now());\r\n  const [curTime, setCurTime] = useState(0);\r\n\r\n  // 현재 드래그 중인지 체크\r\n  const [isDrag, setIsDrag] = useState(false);\r\n\r\n  // 현재 드래그 중인 cell 인덱스 리스트\r\n  const [dragCellList, setDragCellList] = useState([]);\r\n\r\n  // 정답을 맞춘 셀 리스트\r\n  const [answerCellList, setAnswerCellList] = useState([]);\r\n\r\n  // 목표 숫자\r\n  const [targetNumber, setTargetNumber] = useState(0);\r\n\r\n  // 점수\r\n  const [score, setScore] = useState(0); // random 일 경우만\r\n\r\n  // 타이머 id\r\n  const [timerId, setTimerId] = useState(0);\r\n\r\n  let { gameType } = useParams();\r\n\r\n  // 최초 설정\r\n  useEffect(() => {\r\n    console.log(\"mounted\");\r\n\r\n    let arr = new Array(25);\r\n    for (let i = 0; i < arr.length; ++i) {\r\n      arr[i] = getCellNumber();\r\n    }\r\n    setNumberList(arr);\r\n    setTargetNumber(getTargetNumber());\r\n\r\n    setTimerId(setInterval(updateTime, 50));\r\n\r\n    // TODO 게임종료 체크 인터벌\r\n  }, []);\r\n\r\n  const updateTime = () => {\r\n    const deltaTime = (Date.now() - startTime) / 1000;\r\n    if (gameType === \"1to20\") {\r\n      setCurTime(deltaTime.toFixed(2));\r\n    } else {\r\n      setCurTime((60 - deltaTime).toFixed(2));\r\n    }\r\n  };\r\n\r\n  const getCellNumber = () => {\r\n    // 작은 숫자가 많이 나오도록\r\n    const arr = [1, 1, 1, 2, 2, 3, 3, 4, 4];\r\n    return arr[parseInt(Math.random() * arr.length)];\r\n  };\r\n\r\n  const getTargetNumber = () => {\r\n    if (gameType === \"1to20\") {\r\n      return targetNumber + 1;\r\n    } else {\r\n      return parseInt(Math.random() * 5) + 1;\r\n    }\r\n  };\r\n\r\n  const getDragCellSum = () => {\r\n    return dragCellList.reduce(\r\n      (accumulator, currentValue) => accumulator + numberList[currentValue],\r\n      0\r\n    );\r\n  };\r\n\r\n  const processDrag = (index) => {\r\n    if (!dragCellList.includes(index)) {\r\n      console.log(\"processDrag\", index);\r\n      setDragCellList([index, ...dragCellList]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 정답이 맞는지 확인 및 처리\r\n   */\r\n  const checkAnswer = () => {\r\n    if (targetNumber === getDragCellSum()) {\r\n      console.log(\"정답\");\r\n\r\n      // 정답 리스트 업데이트\r\n      setAnswerCellList([...dragCellList]);\r\n      setTimeout(() => {\r\n        setAnswerCellList([]);\r\n      }, 200);\r\n\r\n      // 타겟 넘버 업데이트\r\n      setTargetNumber(getTargetNumber());\r\n\r\n      console.log(targetNumber);\r\n\r\n      // 맞힌 숫자 변경\r\n      const newNumberList = [...numberList];\r\n      for (let i = 0; i < dragCellList.length; ++i) {\r\n        newNumberList[dragCellList[i]] = getCellNumber();\r\n      }\r\n      setNumberList(newNumberList);\r\n\r\n      if (gameType === \"1to20\") {\r\n        // 완료 처리\r\n        if (19 < targetNumber) {\r\n          // 타이머 종료\r\n          clearInterval(timerId);\r\n\r\n          // 기록\r\n          alert(`GAME OVER!!\\n\\n${curTime}초!!`);\r\n\r\n          history.push(\"/\");\r\n        }\r\n      } else {\r\n        //\r\n      }\r\n    } else {\r\n      console.log(\"오답\");\r\n    }\r\n  };\r\n\r\n  const onClickCell = useCallback((index) => {\r\n    console.log(\"onClickCell\", index);\r\n    setIsDrag(true);\r\n    processDrag(index);\r\n  }, []);\r\n\r\n  const onEnterCell = useCallback(\r\n    (index) => {\r\n      if (isDrag) {\r\n        console.log(\"onEnterCell\", index);\r\n        processDrag(index);\r\n      }\r\n    },\r\n    [isDrag, dragCellList]\r\n  );\r\n\r\n  const onTouchMove = useCallback((e) => {\r\n    if (isDrag) {\r\n      const x = e.touches[0].clientX;\r\n      const y = e.touches[0].clientY;\r\n\r\n      for (let i = 0; i < boardRef.current.children.length; ++i) {\r\n        const child = boardRef.current.children[i];\r\n        const childX = child.getBoundingClientRect().x;\r\n        const width = child.getBoundingClientRect().width;\r\n        const childY = child.getBoundingClientRect().y;\r\n\r\n        if (\r\n          childX <= x &&\r\n          x <= childX + width &&\r\n          childY < y &&\r\n          y < childY + width\r\n        ) {\r\n          processDrag(i);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const onMouseUp = () => {\r\n    console.log(\"onMouseUp\");\r\n    console.log(dragCellList, getDragCellSum());\r\n\r\n    // 정답 체크\r\n    checkAnswer();\r\n\r\n    setIsDrag(false);\r\n    setDragCellList([]);\r\n  };\r\n\r\n  return (\r\n    <div onMouseUp={onMouseUp}>\r\n      {/* 상단 */}\r\n      <div className=\"card card-number mb-20\">\r\n        <div className=\"card-header\">TARGET NUMBER</div>\r\n        <div className=\"card-body\">{targetNumber}</div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-flex-end\">\r\n        <div className=\"card\">\r\n          <div className=\"card-header\">TIME</div>\r\n          <div className=\"card-body\">{curTime}</div>\r\n        </div>\r\n        {gameType === \"1to20\" && (\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">BEST-TIME</div>\r\n            <div className=\"card-body\">{score}</div>\r\n          </div>\r\n        )}\r\n        {gameType === \"random\" && (\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">SCORE</div>\r\n            <div className=\"card-body\">{score}</div>\r\n          </div>\r\n        )}\r\n        {gameType === \"random\" && (\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              BEST\r\n              <br />\r\n              SCORE\r\n            </div>\r\n            <div className=\"card-body\">{score}</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* 하단 */}\r\n      <div className=\"board-wrapper\">\r\n        <div className=\"board\" ref={boardRef}>\r\n          {numberList.map((number, index) => (\r\n            <Cell\r\n              value={number}\r\n              key={index}\r\n              index={index}\r\n              clicked={dragCellList.includes(index)}\r\n              isAnswer={answerCellList.includes(index)}\r\n              onClickCell={onClickCell}\r\n              onEnterCell={onEnterCell}\r\n              onTouchMove={onTouchMove}\r\n              onMouseUp={onMouseUp}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import \"./Menu.scss\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <div className=\"d-flex flex-column align-items-center justify-content-center h-100\">\r\n      <div className=\"title\">PLUSPANG</div>\r\n      <Link to=\"/game/1to20\" className=\"btn menu-item\">\r\n        1 to 20\r\n      </Link>\r\n      <Link to=\"/game/random\" className=\"btn menu-item disabled\">\r\n        random\r\n      </Link>\r\n      <Link to=\"/rank\" className=\"btn menu-item disabled\">\r\n        rank\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\n\r\nconst Rank = () => {\r\n  return <div>랭크</div>;\r\n};\r\n\r\nexport default Rank;\r\n","import \"styles/style.scss\";\r\nimport \"./App.scss\";\r\n\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport Game from \"components/game/Game\";\r\nimport Menu from \"components/menu/Menu\";\r\nimport Rank from \"components/rank/Rank\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <Route path=\"/\" component={Menu} exact={true} />\r\n          <Route path=\"/game/:gameType\" component={Game} />\r\n          <Route path=\"/rank\" component={Rank} />\r\n        </BrowserRouter>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import \"./index.css\";\r\n\r\nimport App from \"./components/app/App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}