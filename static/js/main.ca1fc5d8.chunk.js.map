{"version":3,"sources":["components/game/Cell.js","components/game/Game.js","components/menu/Menu.js","components/rank/Rank.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["Cell","value","index","clicked","onClickCell","onEnterCell","isAnswer","className","classNames","onMouseDown","onMouseEnter","Game","history","useState","numberList","setNumberList","Date","now","startTime","curTime","setCurTime","isDrag","setIsDrag","dragCellList","setDragCellList","answerCellList","setAnswerCellList","targetNumber","setTargetNumber","score","timerId","setTimerId","gameType","useParams","useEffect","console","log","arr","Array","i","length","getCellNumber","getTargetNumber","setInterval","updateTime","deltaTime","toFixed","parseInt","Math","random","getDragCellSum","reduce","accumulator","currentValue","processDrag","includes","useCallback","onMouseUp","setTimeout","newNumberList","clearInterval","alert","push","checkAnswer","map","number","Menu","to","Rank","App","basename","process","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca1fc5d8.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Cell = ({\n  value,\n  index,\n  clicked,\n  onClickCell,\n  onEnterCell,\n  isAnswer\n}) => {\n  return (\n    <div\n      className={classNames(`cell value${value}`, { clicked, isAnswer })}\n      onMouseDown={() => onClickCell(index)}\n      onMouseEnter={() => onEnterCell(index)}\n    >\n      {value}\n    </div>\n  );\n};\n\nexport default Cell;\n","import \"./Game.scss\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport Cell from \"components/game/Cell\";\nimport { useParams } from \"react-router-dom\";\n\nconst Game = ({ history }) => {\n  // 숫자판\n  const [numberList, setNumberList] = useState([]);\n\n  // 시간\n  const [startTime, setStartTime] = useState(Date.now());\n  const [curTime, setCurTime] = useState(0);\n\n  // 현재 드래그 중인지 체크\n  const [isDrag, setIsDrag] = useState(false);\n\n  // 현재 드래그 중인 cell 인덱스 리스트\n  const [dragCellList, setDragCellList] = useState([]);\n\n  // 정답을 맞춘 셀 리스트\n  const [answerCellList, setAnswerCellList] = useState([]);\n\n  // 목표 숫자\n  const [targetNumber, setTargetNumber] = useState(0);\n\n  // 점수\n  const [score, setScore] = useState(0); // random 일 경우만\n\n  // 타이머 id\n  const [timerId, setTimerId] = useState(0);\n\n  let { gameType } = useParams();\n\n  // 최초 설정\n  useEffect(() => {\n    console.log(\"mounted\");\n\n    let arr = new Array(25);\n    for (let i = 0; i < arr.length; ++i) {\n      arr[i] = getCellNumber();\n    }\n    setNumberList(arr);\n    setTargetNumber(getTargetNumber());\n\n    setTimerId(setInterval(updateTime, 50));\n\n    // TODO 게임종료 체크 인터벌\n  }, []);\n\n  const updateTime = () => {\n    const deltaTime = (Date.now() - startTime) / 1000;\n    if (gameType === \"1to20\") {\n      setCurTime(deltaTime.toFixed(2));\n    } else {\n      setCurTime((60 - deltaTime).toFixed(2));\n    }\n  };\n\n  const getCellNumber = () => {\n    // 작은 숫자가 많이 나오도록\n    const arr = [1, 1, 1, 2, 2, 3, 3, 4, 4];\n    return arr[parseInt(Math.random() * arr.length)];\n  };\n\n  const getTargetNumber = () => {\n    if (gameType === \"1to20\") {\n      return targetNumber + 1;\n    } else {\n      return parseInt(Math.random() * 5) + 1;\n    }\n  };\n\n  const getDragCellSum = () => {\n    return dragCellList.reduce(\n      (accumulator, currentValue) => accumulator + numberList[currentValue],\n      0\n    );\n  };\n\n  const processDrag = (index) => {\n    if (!dragCellList.includes(index)) {\n      console.log(\"processDrag\", index);\n      setDragCellList([index, ...dragCellList]);\n    }\n  };\n\n  /**\n   * 정답이 맞는지 확인 및 처리\n   */\n  const checkAnswer = () => {\n    if (targetNumber === getDragCellSum()) {\n      console.log(\"정답\");\n\n      // 정답 리스트 업데이트\n      setAnswerCellList([...dragCellList]);\n      setTimeout(() => {\n        setAnswerCellList([]);\n      }, 200);\n\n      // 타겟 넘버 업데이트\n      setTargetNumber(getTargetNumber());\n\n      console.log(targetNumber);\n\n      // 맞힌 숫자 변경\n      const newNumberList = [...numberList];\n      for (let i = 0; i < dragCellList.length; ++i) {\n        newNumberList[dragCellList[i]] = getCellNumber();\n      }\n      setNumberList(newNumberList);\n\n      if (gameType === \"1to20\") {\n        // 완료 처리\n        if (19 < targetNumber) {\n          // 타이머 종료\n          clearInterval(timerId);\n\n          // 기록\n          alert(`GAME OVER!!\\n\\n${curTime}초!!`);\n\n          history.push(\"/\");\n        }\n      } else {\n        //\n      }\n    } else {\n      console.log(\"오답\");\n    }\n  };\n\n  const onClickCell = useCallback((index) => {\n    console.log(\"onClickCell\", index);\n    setIsDrag(true);\n    processDrag(index);\n  }, []);\n\n  const onEnterCell = useCallback(\n    (index) => {\n      if (isDrag) {\n        console.log(\"onEnterCell\", index);\n        processDrag(index);\n      }\n    },\n    [isDrag, dragCellList]\n  );\n\n  const onMouseUp = () => {\n    console.log(\"onMouseUp\");\n    console.log(dragCellList, getDragCellSum());\n\n    // 정답 체크\n    checkAnswer();\n\n    setIsDrag(false);\n    setDragCellList([]);\n  };\n\n  return (\n    <div onMouseUp={onMouseUp}>\n      {/* 상단 */}\n      <div className=\"card card-number mb-20\">\n        <div className=\"card-header\">TARGET NUMBER</div>\n        <div className=\"card-body\">{targetNumber}</div>\n      </div>\n      <div className=\"d-flex justify-content-flex-end\">\n        <div className=\"card\">\n          <div className=\"card-header\">TIME</div>\n          <div className=\"card-body\">{curTime}</div>\n        </div>\n        {gameType === \"1to20\" && (\n          <div className=\"card\">\n            <div className=\"card-header\">BEST-TIME</div>\n            <div className=\"card-body\">{score}</div>\n          </div>\n        )}\n        {gameType === \"random\" && (\n          <div className=\"card\">\n            <div className=\"card-header\">SCORE</div>\n            <div className=\"card-body\">{score}</div>\n          </div>\n        )}\n        {gameType === \"random\" && (\n          <div className=\"card\">\n            <div className=\"card-header\">\n              BEST\n              <br />\n              SCORE\n            </div>\n            <div className=\"card-body\">{score}</div>\n          </div>\n        )}\n      </div>\n\n      {/* 하단 */}\n      <div className=\"board-wrapper\">\n        <div className=\"board\">\n          {numberList.map((number, index) => (\n            <Cell\n              value={number}\n              key={index}\n              index={index}\n              clicked={dragCellList.includes(index)}\n              isAnswer={answerCellList.includes(index)}\n              onClickCell={onClickCell}\n              onEnterCell={onEnterCell}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import \"./Menu.scss\";\n\nimport { Link } from \"react-router-dom\";\nimport React from \"react\";\n\nconst Menu = () => {\n  return (\n    <div className=\"d-flex flex-column align-items-center justify-content-center h-100\">\n      <div className=\"title\">PLUSPANG</div>\n      <Link to=\"/game/1to20\" className=\"btn menu-item\">\n        1 to 20\n      </Link>\n      <Link to=\"/game/random\" className=\"btn menu-item disabled\">\n        random\n      </Link>\n      <Link to=\"/rank\" className=\"btn menu-item disabled\">\n        rank\n      </Link>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nconst Rank = () => {\n  return <div>랭크</div>;\n};\n\nexport default Rank;\n","import \"styles/style.scss\";\nimport \"./App.scss\";\n\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport Game from \"components/game/Game\";\nimport Menu from \"components/menu/Menu\";\nimport Rank from \"components/rank/Rank\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Route path=\"/\" component={Menu} exact={true} />\n          <Route path=\"/game/:gameType\" component={Game} />\n          <Route path=\"/rank\" component={Rank} />\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport App from \"./components/app/App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}