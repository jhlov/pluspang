{"version":3,"sources":["components/game/Cell.js","scripts/RankHelper.js","components/game/Game.js","assets/howto.png","components/howto/HowTo.js","components/menu/Menu.js","components/rank/Rank.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["Cell","value","index","clicked","onClickCell","onEnterCell","onTouchMove","onMouseUp","isAnswer","className","classNames","onMouseDown","isBrowser","onMouseEnter","onTouchStart","e","onTouchEnd","RankHelper","reset","localStorage","setItem","getBestRecord","gameType","recordList","getRecordList","length","record","getItem","JSON","parse","isNewRecord","updateNewRecord","name","push","sort","a","b","stringify","slice","Game","history","useState","numberList","setNumberList","boardRef","useRef","Date","now","startTime","curTime","setCurTime","isDrag","setIsDrag","dragCellList","setDragCellList","answerCellList","setAnswerCellList","targetNumber","setTargetNumber","score","setScore","scoreRef","current","useParams","useEffect","console","log","arr","Array","i","getCellNumber","getTargetNumber","timerId","setInterval","updateTime","clearInterval","deltaTime","newTime","Math","max","prompt","alert","numberWithCommas","parseInt","random","min","newNumber","floor","getDragCellSum","reduce","accumulator","currentValue","processDrag","includes","checkAnswer","useCallback","setTimeout","newTargetNum","newNumberList","toFixed","x","touches","clientX","y","clientY","children","child","childX","getBoundingClientRect","width","childY","toString","replace","ref","map","number","HowTo","src","howto","Menu","to","Rank","oneto20RankList","set1to20RankList","randomRankList","setRandomRankList","onClick","window","confirm","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61d775f2.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport { isBrowser } from \"react-device-detect\";\n\nconst Cell = ({\n  value,\n  index,\n  clicked,\n  onClickCell,\n  onEnterCell,\n  onTouchMove,\n  onMouseUp,\n  isAnswer\n}) => {\n  return (\n    <div\n      className={classNames(`cell value${value} none-drag`, {\n        clicked,\n        isAnswer\n      })}\n      onMouseDown={() => {\n        if (isBrowser) {\n          onClickCell(index);\n        }\n      }}\n      onMouseEnter={() => {\n        if (isBrowser) {\n          onEnterCell(index);\n        }\n      }}\n      onTouchStart={() => onClickCell(index)}\n      onTouchMove={(e) => onTouchMove(e)}\n      onTouchEnd={onMouseUp}\n    >\n      {value}\n    </div>\n  );\n};\n\nexport default Cell;\n","const MAX_RANKER = 10; // 랭킹 저장 수\n\nconst RankHelper = {\n  reset: () => {\n    localStorage.setItem(\"1to20\", \"[]\");\n    localStorage.setItem(\"random\", \"[]\");\n  },\n  getBestRecord: gameType => {\n    const recordList = RankHelper.getRecordList(gameType);\n    return 0 < recordList.length ? recordList[0].record : \"-\";\n  },\n  getRecordList: gameType => {\n    if (gameType === \"1to20\") {\n      return localStorage.getItem(\"1to20\")\n        ? JSON.parse(localStorage.getItem(\"1to20\"))\n        : [];\n    } else {\n      return localStorage.getItem(\"random\")\n        ? JSON.parse(localStorage.getItem(\"random\"))\n        : [];\n    }\n  },\n  isNewRecord: (gameType, record) => {\n    const recordList = RankHelper.getRecordList(gameType);\n    if (gameType === \"1to20\") {\n      return (\n        recordList.length < MAX_RANKER ||\n        record < recordList[recordList.length - 1].record\n      );\n    } else {\n      return (\n        recordList.length < MAX_RANKER ||\n        recordList[recordList.length - 1].record < record\n      );\n    }\n  },\n  updateNewRecord: (gameType, name, record) => {\n    let recordList = RankHelper.getRecordList(gameType);\n    recordList.push({ name: name, record: record });\n    if (gameType === \"1to20\") {\n      recordList = recordList.sort((a, b) => a.record - b.record);\n    } else {\n      recordList = recordList.sort((a, b) => b.record - a.record);\n    }\n\n    localStorage.setItem(\n      gameType,\n      JSON.stringify(recordList.slice(0, MAX_RANKER))\n    );\n  }\n};\n\nexport default RankHelper;\n","import Cell from \"components/game/Cell\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport RankHelper from \"scripts/RankHelper\";\nimport \"./Game.scss\";\n\nconst Game = ({ history }) => {\n  const LAST_TARGET_1TO20 = 3;\n  const RANDOM_TIME = 5;\n\n  // 숫자판\n  const [numberList, setNumberList] = useState([]);\n\n  // 보드 ref\n  const boardRef = useRef();\n\n  // 시간\n  const [startTime, setStartTime] = useState(Date.now());\n  const [curTime, setCurTime] = useState(0);\n\n  // 현재 드래그 중인지 체크\n  const [isDrag, setIsDrag] = useState(false);\n\n  // 현재 드래그 중인 cell 인덱스 리스트\n  const [dragCellList, setDragCellList] = useState([]);\n\n  // 정답을 맞춘 셀 리스트\n  const [answerCellList, setAnswerCellList] = useState([]);\n\n  // 목표 숫자\n  const [targetNumber, setTargetNumber] = useState(0);\n\n  // 점수\n  const [score, setScore] = useState(0); // random 일 경우만\n  const scoreRef = useRef(score);\n  scoreRef.current = score;\n\n  let { gameType } = useParams();\n\n  // 최초 설정\n  useEffect(() => {\n    console.log(\"mounted\");\n\n    let arr = new Array(25);\n    for (let i = 0; i < arr.length; ++i) {\n      arr[i] = getCellNumber();\n    }\n    setNumberList(arr);\n    setTargetNumber(getTargetNumber());\n\n    let timerId = setInterval(updateTime, 50);\n\n    return function cleanup() {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const updateTime = () => {\n    const deltaTime = (Date.now() - startTime) / 1000;\n    if (gameType === \"1to20\") {\n      setCurTime(deltaTime);\n    } else {\n      let newTime = Math.max(0, RANDOM_TIME - deltaTime);\n      setCurTime(newTime);\n\n      // 종료 처리\n      if (newTime === 0) {\n        if (\n          0 < scoreRef.current &&\n          RankHelper.isNewRecord(gameType, scoreRef.current)\n        ) {\n          const name = prompt(\n            `기록갱신\\n\\n${scoreRef.current}점!!\\n\\n이름을 등록해 주세요`\n          );\n\n          if (name) {\n            RankHelper.updateNewRecord(gameType, name, scoreRef.current);\n          }\n        } else {\n          alert(`GAME OVER!!\\n\\n${numberWithCommas(scoreRef.current)}점!!`);\n        }\n\n        history.push(\"/\");\n      }\n    }\n  };\n\n  const getCellNumber = () => {\n    // 작은 숫자가 많이 나오도록\n    const arr = [1, 1, 1, 2, 2, 3, 3, 4, 4];\n    return arr[parseInt(Math.random() * arr.length)];\n  };\n\n  const getTargetNumber = () => {\n    if (gameType === \"1to20\") {\n      return targetNumber + 1;\n    } else {\n      let min = 0;\n      let max = 0;\n\n      if (score < 2000) {\n        min = 4;\n        max = 9;\n      } else if (score < 4000) {\n        min = 5;\n        max = 10;\n      } else if (score < 6000) {\n        min = 5;\n        max = 13;\n      } else if (score < 8000) {\n        min = 6;\n        max = 14;\n      } else {\n        min = 6;\n        max = 15;\n      }\n\n      while (true) {\n        const newNumber = Math.floor(Math.random() * (max - min + 1)) + min;\n        if (newNumber !== targetNumber) {\n          return newNumber;\n        }\n      }\n    }\n  };\n\n  const getDragCellSum = () => {\n    return dragCellList.reduce(\n      (accumulator, currentValue) => accumulator + numberList[currentValue],\n      0\n    );\n  };\n\n  const processDrag = index => {\n    if (!dragCellList.includes(index)) {\n      console.log(\"processDrag\", index);\n      setDragCellList([index, ...dragCellList]);\n    }\n  };\n\n  /**\n   * 정답이 맞는지 확인 및 처리\n   */\n  const checkAnswer = useCallback(() => {\n    if (targetNumber === getDragCellSum()) {\n      console.log(\"정답\");\n\n      // 정답 리스트 업데이트\n      setAnswerCellList([...dragCellList]);\n      setTimeout(() => {\n        setAnswerCellList([]);\n      }, 200);\n\n      // 타겟 넘버 업데이트\n      const newTargetNum = getTargetNumber();\n      setTargetNumber(newTargetNum);\n\n      // 맞힌 숫자 변경\n      const newNumberList = [...numberList];\n      for (let i = 0; i < dragCellList.length; ++i) {\n        newNumberList[dragCellList[i]] = getCellNumber();\n      }\n      setNumberList(newNumberList);\n\n      if (gameType === \"1to20\") {\n        // 종료 체크\n        if (LAST_TARGET_1TO20 < newTargetNum) {\n          // 기록\n          if (RankHelper.isNewRecord(gameType, curTime.toFixed(2))) {\n            const name = prompt(\n              `기록갱신\\n\\n${curTime.toFixed(2)}초!!\\n\\n이름을 등록해 주세요`\n            );\n\n            if (name) {\n              RankHelper.updateNewRecord(gameType, name, curTime.toFixed(2));\n            }\n          } else {\n            alert(`GAME OVER!!\\n\\n${curTime.toFixed(2)}초!!`);\n          }\n\n          history.push(\"/\");\n        }\n      } else {\n        setScore(score + 100 * dragCellList.length);\n      }\n    } else {\n      console.log(\"오답\");\n    }\n  });\n\n  const onClickCell = useCallback(index => {\n    console.log(\"onClickCell\", index);\n    setIsDrag(true);\n    processDrag(index);\n  }, []);\n\n  const onEnterCell = useCallback(\n    index => {\n      if (isDrag) {\n        console.log(\"onEnterCell\", index);\n        processDrag(index);\n      }\n    },\n    [isDrag, dragCellList]\n  );\n\n  const onTouchMove = useCallback(e => {\n    if (isDrag) {\n      const x = e.touches[0].clientX;\n      const y = e.touches[0].clientY;\n\n      for (let i = 0; i < boardRef.current.children.length; ++i) {\n        const child = boardRef.current.children[i];\n        const childX = child.getBoundingClientRect().x;\n        const width = child.getBoundingClientRect().width;\n        const childY = child.getBoundingClientRect().y;\n\n        if (\n          childX <= x &&\n          x <= childX + width &&\n          childY < y &&\n          y < childY + width\n        ) {\n          processDrag(i);\n          break;\n        }\n      }\n    }\n  });\n\n  const onMouseUp = () => {\n    console.log(\"onMouseUp\");\n    console.log(dragCellList, getDragCellSum());\n\n    // 정답 체크\n    checkAnswer();\n\n    setIsDrag(false);\n    setDragCellList([]);\n  };\n\n  const numberWithCommas = x => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  return (\n    <div onMouseUp={onMouseUp}>\n      {/* 상단 */}\n      <div className=\"card card-number mb-20 none-drag\">\n        <div className=\"card-header\">TARGET NUMBER</div>\n        <div className=\"card-body\">{targetNumber}</div>\n      </div>\n      <div className=\"d-flex justify-content-flex-end\">\n        <div className=\"card none-drag\">\n          <div className=\"card-header\">TIME</div>\n          <div className=\"card-body\">{curTime.toFixed(2)}</div>\n        </div>\n        {gameType === \"1to20\" && (\n          <div className=\"card none-drag\">\n            <div className=\"card-header\">BEST-TIME</div>\n            <div className=\"card-body\">\n              {RankHelper.getBestRecord(gameType)}\n            </div>\n          </div>\n        )}\n        {gameType === \"random\" && (\n          <div className=\"card none-drag\">\n            <div className=\"card-header\">SCORE</div>\n            <div className=\"card-body\">{numberWithCommas(score)}</div>\n          </div>\n        )}\n        {gameType === \"random\" && (\n          <div className=\"card none-drag\">\n            <div className=\"card-header\">\n              BEST\n              <br />\n              SCORE\n            </div>\n            <div className=\"card-body\">\n              {RankHelper.getBestRecord(gameType)}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* 하단 */}\n      <div className=\"board-wrapper1\">\n        <div className=\"board-wrapper2\">\n          <div className=\"board\" ref={boardRef}>\n            {numberList.map((number, index) => (\n              <Cell\n                value={number}\n                key={index}\n                index={index}\n                clicked={dragCellList.includes(index)}\n                isAnswer={answerCellList.includes(index)}\n                onClickCell={onClickCell}\n                onEnterCell={onEnterCell}\n                onTouchMove={onTouchMove}\n                onMouseUp={onMouseUp}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","export default __webpack_public_path__ + \"static/media/howto.f9e9d9e5.png\";","import howto from \"assets/howto.png\";\nimport React from \"react\";\n\nconst HowTo = () => {\n  return (\n    <div>\n      <img src={howto} className=\"w-100 h-100\" />\n    </div>\n  );\n};\n\nexport default HowTo;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Menu.scss\";\n\nconst Menu = () => {\n  return (\n    <div className=\"d-flex flex-column align-items-center justify-content-center h-100\">\n      <div className=\"title none-drag\">PLUSPANG</div>\n      <Link to=\"/game/1to20\" className=\"btn menu-item none-drag\">\n        1 TO 20\n      </Link>\n      <Link to=\"/game/random\" className=\"btn menu-item none-drag\">\n        RANDOM\n      </Link>\n      <Link to=\"/rank\" className=\"btn menu-item none-drag\">\n        RANK\n      </Link>\n      <Link to=\"/howto\" className=\"btn menu-item none-drag\">\n        HOW TO\n      </Link>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport RankHelper from \"scripts/RankHelper\";\nimport \"./Rank.scss\";\n\nconst Rank = () => {\n  const [oneto20RankList, set1to20RankList] = useState(\n    RankHelper.getRecordList(\"1to20\")\n  );\n  const [randomRankList, setRandomRankList] = useState(\n    RankHelper.getRecordList(\"random\")\n  );\n\n  const numberWithCommas = x => {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  const onClickReset = () => {\n    if (window.confirm(\"정말 초기화 하시겠습니가?\")) {\n      RankHelper.reset();\n      set1to20RankList([]);\n      setRandomRankList([]);\n    }\n  };\n\n  return (\n    <div className=\"px-40\">\n      <h2>1 TO 20</h2>\n      <ul className=\"mb-20\">\n        {oneto20RankList.map((e, index) => (\n          <li className=\"d-flex\">\n            <span>{index + 1}. </span>\n            <span className=\"name\"> {e.name}</span>{\" \"}\n            <span className=\"ml-auto\">{e.record}초</span>\n          </li>\n        ))}\n        {oneto20RankList.length === 0 && <p>기록이 없습니다.</p>}\n      </ul>\n\n      <h2>RANDOM</h2>\n      <ul className=\"mb-20\">\n        {randomRankList.map((e, index) => (\n          <li className=\"d-flex\">\n            {index + 1}. <span className=\"name ml-20\"> {e.name}</span>{\" \"}\n            <span className=\"ml-auto\">{numberWithCommas(e.record)}점</span>\n          </li>\n        ))}\n        {randomRankList.length === 0 && <p>기록이 없습니다.</p>}\n      </ul>\n\n      <div className=\"btn-group\">\n        <Link to=\"/\" className=\"btn mb-8\">\n          메뉴\n        </Link>\n        <button className=\"btn\" onClick={onClickReset}>\n          초기화\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Rank;\n","import Game from \"components/game/Game\";\nimport HowTo from \"components/howto/HowTo\";\nimport Menu from \"components/menu/Menu\";\nimport Rank from \"components/rank/Rank\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"styles/style.scss\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <HashRouter>\n          <Route path=\"/\" component={Menu} exact={true} />\n          <Route path=\"/game/:gameType\" component={Game} />\n          <Route path=\"/rank\" component={Rank} />\n          <Route path=\"/howto\" component={HowTo} />\n        </HashRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport App from \"./components/app/App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}